import {
	Component,
	Fragment,
	PropsWithChildren,
	ReactNode,
	useEffect,
	useState,
  } from "react";
  import { usePandaInput } from "./PandaInput";
  // @ts-ignore
  import { Subject, Subscription } from "rxjs";
  import { AnyObject } from "immer/dist/internal";
  
  export function useForm<Form extends object>(fields: Form) {
	type NumString = string | number;
	type Emission = { field: string; value: NumString };
	const subject = new Subject<Emission>();
  
	interface ConsumerProps {
	  field: keyof Form;
	}
  
	class Consumer extends Component<ConsumerProps> {
	  subscription: Subscription | undefined;
  
	  componentDidMount() {
		this.subscription = subject.subscribe({
		  next: (val: Emission) => {
			if (val.field === this.props.field) {
			  console.log(val.field);
			  this.forceUpdate();
			}
		  },
		});
	  }
	  componentWillUnmount() {
		this.subscription?.unsubscribe();
	  }
	  render(): ReactNode {
		return <Fragment>{this.props.children}</Fragment>;
	  }
	}
  
	const proxy = new Proxy(fields, {
	  set: (fieldMap: AnyObject, field: string, value: NumString) => {
		fieldMap[field] = value;
		subject.next({ field, value });
		return true;
	  },
	});
  
	const setField = (field: string, value: NumString) => {
	  proxy[field] = value;
	};
  
	const [{ FormConsumer, InputComponent, form }] = useState({
	  InputComponent: usePandaInput<Form>(setField),
	  FormConsumer: Consumer,
	  form: proxy,
	});
  
	return { PandaInput: InputComponent, FormConsumer, form };
  }
  